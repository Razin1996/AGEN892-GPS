import os
import pandas as pd
import streamlit as st

st.set_page_config(page_title="State Income Explorer", layout="wide")
st.title("State Median Income Map & County Statistics (1989 vs 2015)")

# Load prebuilt Folium map (generated by your notebook)
MAP_PATH = "income_map.html"
if not os.path.exists(MAP_PATH):
    st.warning("⚠️ income_map.html not found. Run your notebook map code to create it, then refresh.")
    map_html = "<p style='color:red;'>income_map.html is missing.</p>"
else:
    with open(MAP_PATH, "r", encoding="utf-8") as f:
        map_html = f.read()

# Load income table (note: 1989 has two series in this CSV)
income = pd.read_csv(
    "https://raw.githubusercontent.com/pri-data/50-states/master/data/income-counties-states-national.csv",
    dtype={"fips": str},
)
for c in ["income-2015", "income-1989a", "income-1989b", "change"]:
    if c in income.columns:
        income[c] = pd.to_numeric(income[c], errors="coerce")

# State names & alpha-2 codes
abbrs = pd.read_json(
    "https://gist.githubusercontent.com/tvpmb/4734703/raw/b54d03154c339ed3047c66fefcece4727dfc931a/US%2520State%2520List"
)
abbrs = abbrs.rename(columns={k: k.lower() for k in abbrs.columns})
abbrs = abbrs.rename(columns={"name": "name", "alpha-2": "alpha-2"}).sort_values("name")

# Layout: map (left) | controls + stats (right)
left, right = st.columns([3, 2], gap="large")

with left:
    st.subheader("Interactive Map")
    st.components.v1.html(map_html, height=650, scrolling=True)

with right:
    st.subheader("Per-State County Income Stats")

    # Toggle for 1989 series
    series_option = st.radio(
        "1989 series:",
        ["1989 (nominal)", "1989 (adjusted to 2015 $)"],
        index=1,
        horizontal=True,
    )
    col_1989 = "income-1989b" if "adjusted" in series_option else "income-1989a"
    label_1989 = "Income 1989 (USD, adjusted)" if col_1989 == "income-1989b" else "Income 1989 (USD, nominal)"

    # State selector
    state_label_to_code = {f'{r["name"]} ({r["alpha-2"]})': r["alpha-2"] for _, r in abbrs.iterrows()}
    default_label = "Nebraska (NE)"
    idx = list(state_label_to_code.keys()).index(default_label) if default_label in state_label_to_code else 0
    choice = st.selectbox("Choose a state:", list(state_label_to_code.keys()), index=idx)
    chosen_code = state_label_to_code[choice]

    # Filter counties for chosen state
    need_cols = ["county", col_1989, "income-2015", "state"]
    missing = [c for c in need_cols if c not in income.columns]
    if missing:
        st.error(f"Missing expected columns in source CSV: {missing}")
        st.stop()

    state_counties = (
        income.loc[income["state"] == chosen_code, ["county", col_1989, "income-2015"]]
        .copy()
        .sort_values("county", kind="stable")
        .reset_index(drop=True)
    )

    # Statewide medians
    med_1989 = float(state_counties[col_1989].median(skipna=True)) if len(state_counties) else float("nan")
    med_2015 = float(state_counties["income-2015"].median(skipna=True)) if len(state_counties) else float("nan")

    m1, m2 = st.columns(2)
    m1.metric(("Statewide " + label_1989), f"{med_1989:,.0f}" if pd.notna(med_1989) else "—")
    m2.metric("Statewide Median Income (2015, USD)", f"{med_2015:,.0f}" if pd.notna(med_2015) else "—")

    st.markdown("#### County Table")
    display_df = state_counties.rename(
        columns={"county": "County", col_1989: label_1989, "income-2015": "Income 2015 (USD)"}
    )

    # Append a summary row
    if len(display_df):
        summary = pd.DataFrame([{"County": "(state median)", label_1989: med_1989, "Income 2015 (USD)": med_2015}])
        display_df = pd.concat([display_df, summary], ignore_index=True)

    st.dataframe(
        display_df.style.format({label_1989: "{:,.0f}", "Income 2015 (USD)": "{:,.0f}"}),
        width="stretch",  # Streamlit deprecation fix for use_container_width
        height=420,
    )

    st.download_button(
        "Download this table (CSV)",
        data=display_df.to_csv(index=False).encode("utf-8"),
        file_name=f"county_incomes_{chosen_code}.csv",
        mime="text/csv",
    )

    st.caption(
        "Note: 1989 has two series — nominal (1989 dollars) and adjusted to 2015 dollars. "
        "For apples-to-apples with 2015, use the adjusted series."
    )
